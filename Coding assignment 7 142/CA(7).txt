// File: Point.java
public class Point
{
// data fields
private double x;
private double y;

// constructor
public Point(double x_coord, double y_coord)
{
x = x_coord;
y = y_coord;
}

// equals method
public boolean equals(Point anotherPoint)
{
if(x == anotherPoint.x && y == anotherPoint.y)
return true;
else
return false;
}

// lessThan method
public boolean lessThan(Point anotherPoint)
{
if((y < anotherPoint.y) || (y == anotherPoint.y && x < anotherPoint.x))
return true;
else
return false;
}

// slopeTo method
public double slopeTo(Point anotherPoint)
{
double slope = 0;

if(anotherPoint.x - x != 0)
slope = (anotherPoint.y - y) / (anotherPoint.x - x);

return slope;
}

// compareSlopes method
int compareSlopes(Point anotherPoint)
{
Point origin = new Point(0, 0);

if(slopeTo(origin) < anotherPoint.slopeTo(origin))
return -1;
else if(slopeTo(origin) == anotherPoint.slopeTo(origin))
return 0;
else // if(slopeTo(origin) > anotherPoint.slopeTo(origin))
return 1;
}

// toString method
public String toString()
{
return "(" + x + ", " + y + ")";
}
}

-------------------------------------------------------------------------------------------------------------------------------------

// File: PointArray.java
import java.io.*;
public class PointArray
{
// data field
private Point points[];

// constructor 1
public PointArray(double arr[])
{
points = new Point[arr.length / 2];

int i = 0;
int j = 0;
while(i < arr.length)
{
points[j] = new Point(arr[i], arr[i + 1]);

i += 2;
j++;
}
}

// constructor 2
public PointArray(FileInputStream fis) throws IOException
{
byte b1[] = new byte[fis.available()];
fis.read(b1, 0, b1.length);

char ch = (char) b1[0];
int size = Integer.parseInt("" + ch);

String lines[] = new String[size];
for(int i = 0; i < lines.length; i++)
lines[i] = "";

int k = 0;
int count = 0;
for(int i = 3; i < b1.length; i++)
{
if(b1[i] == '\n')
{
count++;

if(count == 1)
k++;
}
else
{
lines[k] += (char) b1[i];
count = 0;
}
}

points = new Point[size];

int j = 0;
for(int i = 0; i < lines.length; i++)
{
String line = lines[i];
String tokens[] = line.split(" ");

double x_coord = Double.parseDouble(tokens[0]);
double y_coord = Double.parseDouble(tokens[1]);
points[j] = new Point(x_coord, y_coord);
j++;
}

fis.close();
}

// contains3collinear method
public boolean contains3collinear()
{
if(points[0].slopeTo(points[1]) == points[1].slopeTo(points[2]))
return true;
else
return false;
}

// sort method
public void sort()
{
for(int i = 0; i < points.length - 1; i++)
{
int minIndex = i;

for(int j = i + 1; j < points.length; j++)
{
if(points[j].lessThan(points[minIndex]))
minIndex = j;
}

if(minIndex != i)
{
Point temp = points[i];
points[i] = points[minIndex];
points[minIndex] = temp;
}
}
}

// equals method
public boolean equals(PointArray anotherPointArray)
{
if(points.length != anotherPointArray.points.length)
return false;

boolean founds[] = new boolean[points.length];

for(int i = 0; i < points.length; i++)
{
for(int j = 0; j < anotherPointArray.points.length; j++)
{
if(points[i].equals(anotherPointArray.points[j])
&& founds[j] == false)
{
founds[j] = true;
break;
}
}
}

for(int i = 0; i < founds.length; i++)
{
if(founds[i] == false)
return false;
}

return true;
}

// toString method
public String toString()
{
String result = "{";

for(int i = 0; i < points.length; i++)
{
if(i != points.length - 1)
result += points[i] + ", ";
else
result += points[i];
}

result += "}";

return result;
}
}

--------------------------------------------------------------------------------------------------------------------------------------

// File: PointArrayTester.java
import java.io.*;
public class PointArrayTester
{
// main method
public static void main(String[] args) throws IOException
{
FileInputStream file = new FileInputStream(new File("pointsFile.txt"));
double arr1[] = {2.4, 3.5, 4.7, 1.0, 6.4, 11.01};
double arr2[] = {4.2, 5.3, 7.4, 0.1, 4.6, 1.11};
double arr3[] = {2.4, 3.5, 4.7, 1.0, 6.4, 11.01};

PointArray pa1 = new PointArray(file);
PointArray pa2 = new PointArray(arr1);
PointArray pa3 = new PointArray(arr2);
PointArray pa4 = new PointArray(arr3);

System.out.println("Points Array #1: " + pa1);
System.out.println("Points Array #2: " + pa2);
System.out.println("Points Array #3: " + pa3);
System.out.println("Points Array #4: " + pa4);

System.out.println("\nPoints Array #1 is collinear.(T/F): " + pa1.contains3collinear());
System.out.println("Points Array #2 is collinear.(T/F): " + pa2.contains3collinear());
System.out.println("Points Array #3 is collinear.(T/F): " + pa3.contains3collinear());
System.out.println("Points Array #4 is collinear.(T/F): " + pa4.contains3collinear());

System.out.println("\nPoints Array #1 is equal to Points Array #3.(T/F): " + pa1.equals(pa3));
System.out.println("Points Array #2 is equal to Points Array #4.(T/F): " + pa2.equals(pa4));

pa1.sort();
pa2.sort();
pa3.sort();
pa4.sort();
System.out.println("\nSorted Points Array #1: " + pa1);
System.out.println("Sorted Points Array #2: " + pa2);
System.out.println("Sorted Points Array #3: " + pa3);
System.out.println("Sorted Points Array #4: " + pa4);

file.close();
}
}